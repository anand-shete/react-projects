// Library vs Framework
Library:
    A library is like a toolbox. We pick and use the functions we need. We are in control of when and how to call the functions. A library is like ordering food from a menu—we choose what we want.
    Example: Lodash (JavaScript) → It provides utility functions, but we decide when to use them.
Framework
    A framework is like a template or skeleton. It provides a structure, and we fill in the missing parts. The framework is in control, it calls our code at the right time (Inversion of Control). A framework is like a meal kit—it tells us how to cook and when to do each step.
    Example: React → We write components, but React decides when to update the UI.

// What is React.js
React is a JavaScript library for building user interfaces, primarily for single-page applications. We decide how to structure your application and call React to render components.
It is Developed by Facebook and widely used in modern web development.


// What is JSX?
JSX (JavaScript XML) is a syntax extension for JavaScript, commonly used with React to describe what the UI should look like. It looks very similar to HTML but is actually a way to write JavaScript that can create React elements.


// Vite
Vite is a fast build tool and development server, often used with modern frameworks like React, Vue, and others. It provides a smooth developer experience with fast hot module replacement (HMR) and optimized production builds.

// create-react-app vs Vite 
    CRA uses Webpack to bundle all files during development. It creates a large bundle upfront, which can be time-consuming. Every change triggers a full rebuild or partial rebuild, which can get slower as the project grows.
    Vite serves your source files as native ES modules in the browser instead of bundling everything upfront During development, it only processes and sends the code you’re currently working on, leading to instant startup and faster updates. Uses esbuild (written in Go) for lightning-fast dependency pre-bundling.
Result: vite is faster than create-react-app

npx create-next-app app-name            // creates a new Next.js application.
npm create vite app-name
npx create-react-app app-name           // using a stupid command               

// npm run build
This command creates an optimized production-ready build of the application.
It minifies the JavaScript, CSS, and other assets to reduce file sizes. Optimizes the code by removing unused imports (tree-shaking). Bundles all the resources (HTML, CSS, JS, etc.) into static files that can be deployed to a web server. Generates files typically in a folder named build or dist.

// npm run preview
This command allows us to preview the production build locally before deploying it.
Serves the production build (dist folder) locally on a lightweight server. Useful for testing how the app behaves in a production-like environment. local server mimics how the application will behave after deployment.


// Linter
A linter is a tool that analyzes your code to identify potential errors and styling issues according to a set of predefined rules. These rules ensure that your code is written in a consistent way and follows best practices. The goal is to catch bugs early, improve readability, and enforce coding standards.
For example, linters might check:
    If you're using semicolons correctly.
    Whether you're using consistent indentation (spaces vs. tabs).
    If your variable names are clear and follow naming conventions.
    Whether you’re using certain JavaScript features in a way that might lead to bugs.

// ESLint
ESLint is one of the most popular linters for JavaScript (and TypeScript) code. It helps you identify and fix problems in your JavaScript codebase before they become bigger issues.
ESLint works by analyzing your code according to a configuration file (.eslintrc), which defines the rules for linting. You can either use a pre-made configuration or customize it to fit your project’s needs.




// Configuring tailwind with Vite 
https://tailwindcss.com/docs/installation/using-vite
npm install tailwindcss @tailwindcss/vite
Inside vite.config.js
    import tailwindcss from '@tailwindcss/vite';
    plugins: [tailwindcss(), react()],
Add decorators inside index.css
    @import "tailwindcss";
Change VS Code settings to treat all .css files as tailwindcss
"files.associations": {
  "*.css": "tailwindcss"
}


// React Fragments
The <> and </> syntax in React is called a React Fragment. It is used to group multiple elements without adding an extra DOM node (like a <div> or <span>).
Normally, when returning multiple elements, we must wrap them in a parent container like <div>. Fragments make the JSX more concise and clean by removing unnecessary wrapper elements. It is a shorthand for <React.Fragment>




// Virtual DOM
The Virtual DOM is a lightweight, in-memory representation of the actual DOM (Document Object Model). It allows React to optimize rendering and updates by minimizing direct manipulations of the real DOM.
When a component’s state or props change, React creates a new Virtual DOM tree that reflects these changes. It then compares this new tree with the previous Virtual DOM tree using a process called diffing. After identifying the differences (or "diffs"), React calculates the most efficient way to update the real DOM, minimizing the number of changes made.This process results in improved performance, as direct updates to the DOM can be slow.

// Fiber
Fiber is the reconciliation algorithm introduced in React 16 to enhance the performance and capabilities of the Virtual DOM. It enables React to split rendering work into chunks and prioritize updates.
Fiber allows React to pause, abort, or restart rendering work, making it more responsive to user interactions.

// Reconciliation
Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM." 
A high-level description goes something like this: when we render a React application, a tree of nodes that describes the app is generated and saved in memory. This tree is then flushed to the rendering environment — for example, in the case of a browser application, it's translated to a set of DOM operations. When the app is updated (usually via setState), a new tree is generated. The new tree is diffed with the previous tree to compute which operations are needed to update the rendered app.

// Summary
Virtual DOM: An in-memory representation of the actual DOM that optimizes updates and rendering.
Fiber: The reconciliation algorithm that allows incremental rendering, prioritization of updates, and improved performance.
Reconciliation: The process of comparing Virtual DOM trees to determine the necessary updates to the real DOM, ensuring efficient rendering.


// Killing a process (windows)
netstat -ano | findstr :5173
taskkill /PID <PID> /F


// Props
In React, props (short for "properties") are a way of passing data from one component to another. They allow us to customize a child component based on the values passed to it by its parent component.
Props are read-only and should not be modified inside the child component.
Props can be of any type, including strings, numbers, arrays, functions, etc. We can destructure props in the child component for cleaner code. React uses defaultProps to set default values for props if not passed by the parent.
PropTypes can be used for type-checking props.



// Hooks
Hooks are special functions in React that allow us to use state, lifecycle methods, and other React features in functional components. Before hooks, these features were only available in class components.
Introduced in React 16.8, hooks simplify React development by eliminating the need for class components
    Eg. useState, useCallback, useEffect, useContext,..

// useState
useState is a React hook that allows components to have local state. It lets us store and update values inside a component without needing a class component.
Syntax:
    const [value, setValue] = useState(initial);

    value: The current state value. Initially, it holds the value passed to useState
    setValue: A function to update the state. Calling setValue(10) updates value to 10 and re-renders the component on which useState is used with the new state. Hence, the component is re-rendered after every update. It also has a parameter when called contains the value of the previous state
Key Points About useState:
    State Updates Are Asynchronous: State does not update immediately. React batches state updates for performance reasons. Hence, simply logging immediately after updating state won't log the result.
    useState can store different types of values: String, Boolean, Object, Array, etc.
Best Practices:
    Always use functional updates when the new state depends on the previous state by utilizing the parameter inside setValue which contains the prev value


// useCallback
When a React component re-renders, any functions defined inside it are recreated. This can lead to unnecessary re-renders in child components if those functions are passed down as props, because their reference changes every time. To prevent this, useCallback ensures the function maintains the same reference unless its dependencies change. This improves performance and avoids unnecessary rendering.
Use Cases:
    Passing a function as a prop to child components to prevent unnecessary re-renders.
    Storing a function in a dependency array of useEffect to avoid infinite loops.
Syntax: 
    const memoizedCallback = useCallback(() => {
        // Function logic here
    }, [dependencies] );

    memoizedCallback: The returned memoized version of the callback function.
    [dependencies]: An array of values that the callback depends on. The function is re-created only when one of these dependencies changes. React guarantees that state setter functions (setPassword) never change between renders, so we don’t need to include it in the dependencies array.
Common Pitfalls:
    Overusing useCallback: If the function is not passed as a prop or isn't causing performance issues, using useCallback is unnecessary. It can add complexity without any benefit.
    Failing to include all required dependencies in the dependency array can lead to stale values or bugs.
    useCallback does not prevent a component from re-rendering. It only memoizes the function reference.


// useEffect
The useEffect hook in React is used to perform side effects in functional components. Side effects can include things like data fetching, subscriptions, DOM manipulations, or setting up timers.
Uses:
    Fetching data from an API.
    Listening to events (e.g., window resize).
    Updating the DOM (e.g., changing the title).
    Setting up subscriptions (e.g., WebSockets, intervals).
    Its first called when a component is loaded inside the DOM
Syntax:
    useEffect(() => {
        // Effect logic
    return () => {
        // Cleanup logic (optional)
    };
    }, [dependencies]);

    Callback: The function passed to useEffect contains the logic for the side effect. This can include things like fetching data, adding event listeners, or updating state.
    Cleanup Function (Optional): If useEffect sets up resources (e.g., event listeners or subscriptions), it can return a cleanup function to clean up those resources when the component unmounts or before the effect runs again.
    [dependencies]: The second argument to useEffect is an array of dependencies. It determines when the effect should re-run.
    Empty Array ([]): Runs the effect only once, after the initial render.
    No Array (undefined): Runs the effect after every render.
    Specific Dependencies: Runs the effect only when the listed dependencies change.
Common Pitfalls:
    Avoid Infinite Loops: Ensure the dependency array includes all variables used inside the effect to avoid stale values or unnecessary re-runs.
    Cleanup for Resources: Always clean up subscriptions, event listeners, or intervals to avoid memory leaks.
    Split unrelated side effects into separate useEffect calls for better readability and maintainability.


// useRef
The useRef hook in React is used to create a mutable reference that persists across renders without causing re-renders.
Use it when:
    Accessing DOM elements (e.g., focus an input).
    Storing mutable values that don’t trigger re-renders.
    Keeping previous values between renders.
Syntax
    const inputRef = useRef(initialValue);
    const focusInput = () => {
        console.log(inputRef.current);
    };
    return <input ref={inputRef} />;

    initialValue: The initial value of the ref.
    inputRef.current: It gives us the referenced element, allowing us to call methods without triggering a re-render




// Link and NavLink
Using an <a> tag in a React app causes a full page reload. 
Meaning: The entire application reloads, losing all component state. It makes navigation slower because the browser requests a new HTML page from the server. React's virtual DOM is bypassed, reducing performance benefits.
Link:
    The Link component is used to navigate between pages without reloading the whole application.
    It prevents full-page reload. Uses React Router's client-side navigation. Keeps application state intact.    Use Link for basic navigation. 
    We don't need to give complete URL, replative URL works as well
NavLink:
    https://reactrouter.com/start/library/navigating
    The NavLink component is similar to Link, but it adds an active CSS class when the link is active.
    Whenever a NavLink is active, it will automatically have an .active class name for easy styling with CSS.
    It also has callback props on className, style, and children with the active state for inline styling or conditional rendering
    It provides an isActive ClassName prop to style the active link. Helps in UI/UX to highlight the current page.  Use NavLink when active styling is needed.



// react-router
react-router is the standard library for handling routing in React applications. It allows us to navigate between different pages or components without reloading the page, allowing a seamless Single Page Application experience.
    react → Core React library (for building components, state management, etc.).
    react-native → Used when building mobile apps (iOS & Android).
    react-dom → Used when building web apps (runs in browsers).
Key Features of React Router:
    Define routes in a declarative manner using JSX, making the code more readable and maintainable.
    Support for nested routing structures, allowing complex UI hierarchies to be represented cleanly.
    Handle dynamic segments in URLs, enabling parameterized routes for resources like user profiles or product pages
    Implement authentication and authorization checks to protect certain routes from unauthorized access.
    Navigate between routes programmatically using hooks like useNavigate, enhancing user interactions.

// Core Components and Hooks:
<Router>: The base component that enables routing in an application. Depending on the environment, different routers are used:
    <BrowserRouter>: For web applications, uses the HTML5 history API.
    <MemoryRouter>: Keeps the history of your "URL" in memory (does not read or write to the address bar), useful in testing or non-browser environments.
    <StaticRouter>: Useful in environments where the app's location never actually changes, like when rendering a single route to static HTML on a server. 
<Routes> and <Route>: Define the mapping between URLs and components. <Routes> is a container for multiple <Route> elements.
<Link> and <NavLink>: Components for navigation without full page reloads. <NavLink> provides additional styling attributes when the link is active.

// Hooks:
    useParams: Access URL parameters.
    useNavigate: Programmatically navigate to different routes. Reserve usage of useNavigate to situations where the user is not interacting but you need to navigate, for example: redirecting after form submission, Logging them out after inactivity, Timed UIs like quizzes, etc.
    useSearchParams: Search params are the values after a ? in the URL. They are accessible from useSearchParams, which returns an instance of URLSearchParams
    useLocation: Access the current location object, which contains information about the current URL.


// <Route> examples
<Routes>
    <Route path="/" element={<Layout />}>               // Absolute path ignores parent
        <Route index element={<Home />} />              // Nested route. index attribute is used to designate a  default child route within a parent route. index replaces path="/" for child routes. It acts as the default route when no additional path is specified. It does not require a path attribute. There can be only one index route per parent, as it represents the default case.

        <Route path="about" element={<About />} />      // Since this is nested Route, its relative to parent. So, this route will automatically be /about 

        <Route path="user/:userId" element={<User />} />        // If a path segment starts with : then it becomes a "dynamic segment". When the route matches the URL, the dynamic segment will be parsed from the URL and provided as params to other router APIs like useParams. Then we can access these params in User Component as let { userId } = useParams(); 
        We can have multiple dynamic segments in one route path="/c/:categoryId/p/:productId"

        <Route path=":lang?/categories" element={<Categories />} />         // You can make a route segment optional by adding a ? to the end of the segment.


    </Route>
</Routes>


// loader
In React Router, the loader attribute in a <Route> component is a powerful feature that allows you to fetch and prepare data before a route is rendered. This ensures that your components have the necessary data available upon rendering, enhancing the user experience by preventing empty states or loading indicators within the component itself.
When a route with a loader is matched, React Router executes the specified loader function. This function can perform asynchronous operations, such as fetching data from an API. Once the data is retrieved, it is made available to the component through hooks like useLoaderData.





// Context API 
The Context API in React is a built-in state management solution that allows us to share values (such as state, functions, themes, or authentication data) between components without prop drilling. It is useful when multiple components at different nesting levels need access to the same data.
We use createContext() to create a new context.
The Provider component makes the context available to its children.
There are two ways to use context in components:
🔹 Method 1: Using useContext (Recommended for Functional Components)
🔹 Method 2: Using Context.Consumer (For Class Components)
If the application has frequent state updates, context might cause unnecessary re-renders. In such cases, using Redux, Zustand, or Recoil is a better approach.





// Redux
Redux is a state management library used for managing the state of an application in a predictable way. It is especially useful for large applications where managing state across multiple components becomes complex.
Core Principles of Redux:
    Single Source of Truth: The entire application state is stored in a single JavaScript object (store).
    State is Read-Only: The only way to change the state is by dispatching actions (we can't directly modify the state).
    Changes are Made with Pure Functions: The logic that modifies the state is written in reducers, which are pure functions (i.e., they return a new state based on the previous state and action).
Redux Components:
    Store     → Holds the global state of the application.
    Actions	  → Plain JavaScript objects that describe what should be done.
    Reducers  → Functions that determine how the state should change in response to an action.
    Dispatch  → The function used to send actions to reducers.
How Redux Works
    The store is created using createStore().
    Components dispatch actions using dispatch().
    The reducers handle these actions and update the state.
    Components subscribe to the store to get the updated state.



// React-Redux
React-Redux is a binding library that helps integrate Redux with React applications.
Why Use React-Redux?
    Provides React hooks (useSelector, useDispatch) for interacting with the Redux store.
    Uses the Context API internally to avoid prop drilling.
    Optimized performance with memoization and selectors.
Core Features
    Provider	: Wraps the entire app and gives access to the Redux store.
    useSelector	: Allows components to access the state from the store.
    useDispatch	: Allows components to dispatch actions to modify the state.



// Redux Toolkit (RTK)
Redux Toolkit (RTK) is the official, recommended way to write Redux code. It simplifies the setup, removes boilerplate code, and improves performance.
Why Use Redux Toolkit?
    Less boilerplate (reduces manual action types, reducers, and store setup).
    Built-in middleware like redux-thunk for handling async operations.
    Immutable updates with Immer.js, so we can write mutable-looking code.
    Built-in DevTools support.
Core Features of RTK
    configureStore	: Simplifies store setup and enables middleware.
    createSlice	    : Combines reducers and actions into a single function.
    createAsyncThunk: Handles asynchronous logic like API calls.
    useSelector & useDispatch: Same as React-Redux but optimized for RTK.
How Redux Toolkit Works
    Define slices using createSlice().
    Use configureStore() to create the store.
    Dispatch actions using useDispatch().
    Access state using useSelector().
    Use Redux if working in a non-React project (vanilla JS, Vue, etc.).
    Use React-Redux when integrating Redux into a React app.
    Use Redux Toolkit for modern React projects (recommended approach).
npm install @reduxjs/toolkit
npm install react-redux




// blog-application
Appwrite for backend as service 
Tinymce rich text editor for text editor functionality
Html-react-parser using to parse html 
React Hook Forms to hamdle input forms
Creating .env file to store environment variable